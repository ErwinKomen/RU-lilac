# Generated by Django 2.2.24 on 2022-02-17 14:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import lila.seeker.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bible', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Austat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incipit', models.TextField(blank=True, null=True, verbose_name='Incipit')),
                ('srcftext', models.TextField(blank=True, null=True, verbose_name='Incipit (searchable)')),
                ('explicit', models.TextField(blank=True, null=True, verbose_name='Explicit')),
                ('srcftrans', models.TextField(blank=True, null=True, verbose_name='Explicit (searchable)')),
                ('code', models.CharField(blank=True, default='ZZZ_DETERMINE', max_length=20, null=True, verbose_name='lila code')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='Number')),
                ('stype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='-', max_length=5, verbose_name='Status')),
                ('atype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='def', max_length=5, verbose_name='Approval')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('firstsig', models.CharField(blank=True, max_length=255, null=True, verbose_name='Code')),
                ('hccount', models.IntegerField(default=0, verbose_name='Historical Collection count')),
                ('scount', models.IntegerField(default=0, verbose_name='Sermon set size')),
                ('ssgcount', models.IntegerField(default=0, verbose_name='SSG set size')),
            ],
        ),
        migrations.CreateModel(
            name='AustatCorpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mfw', models.TextField(default='[]', verbose_name='Most frequent words')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('status', models.TextField(default='empty', verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='AustatDist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField(default=100.0, verbose_name='Distance')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('abbr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Abbreviation')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='Number')),
                ('editable', models.BooleanField(default=True, verbose_name='Editable')),
            ],
        ),
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BasketMan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BasketSuper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BibRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chvslist', models.TextField(blank=True, null=True, verbose_name='Chapters and verses')),
                ('intro', models.CharField(blank=True, max_length=255, null=True, verbose_name='Introducer')),
                ('added', models.CharField(blank=True, max_length=255, null=True, verbose_name='Addition')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookbibranges', to='bible.Book')),
            ],
        ),
        migrations.CreateModel(
            name='Canwit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('subtitle', models.CharField(blank=True, max_length=255, null=True, verbose_name='Sub title')),
                ('sectiontitle', models.CharField(blank=True, max_length=255, null=True, verbose_name='Section title')),
                ('autype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='ave', max_length=5, verbose_name='Author certainty')),
                ('locus', models.CharField(blank=True, max_length=255, null=True, verbose_name='Locus')),
                ('ftext', models.TextField(blank=True, null=True, verbose_name='Full text')),
                ('srchftext', models.TextField(blank=True, null=True, verbose_name='Full text (searchable)')),
                ('ftrans', models.TextField(blank=True, null=True, verbose_name='Translation')),
                ('srchftrans', models.TextField(blank=True, null=True, verbose_name='Translation (searchable)')),
                ('postscriptum', models.TextField(blank=True, null=True, verbose_name='Postscriptum')),
                ('quote', models.TextField(blank=True, null=True, verbose_name='Quote')),
                ('bibnotes', models.TextField(blank=True, null=True, verbose_name='Bibliography notes')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('additional', models.TextField(blank=True, null=True, verbose_name='Additional')),
                ('bibleref', models.TextField(blank=True, null=True, verbose_name='Bible reference(s)')),
                ('verses', models.TextField(blank=True, null=True, verbose_name='List of verses')),
                ('stype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Status')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('mtype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Manifestation type')),
                ('siglist', models.TextField(default='[]', verbose_name='List of signatures')),
                ('order', models.IntegerField(default=-1, verbose_name='Order')),
                ('method', models.CharField(default='(OLD)', max_length=255, verbose_name='Method')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idVilleEtab', models.IntegerField(default=-1, verbose_name='CNRS city id')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='Codico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='SUPPLY A NAME', max_length=255, verbose_name='Name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('support', models.TextField(blank=True, null=True, verbose_name='Support')),
                ('extent', models.TextField(blank=True, max_length=255, null=True, verbose_name='Extent')),
                ('format', models.CharField(blank=True, max_length=255, null=True, verbose_name='Format')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('pagefirst', models.IntegerField(default=0, verbose_name='First page')),
                ('pagelast', models.IntegerField(default=0, verbose_name='Last page')),
                ('yearstart', models.IntegerField(default=100, verbose_name='Year from')),
                ('yearfinish', models.IntegerField(default=100, verbose_name='Year until')),
                ('stype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Status')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'codicological unit',
                'verbose_name_plural': 'codicological unites',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('readonly', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('0', '-'), ('1', 'N/A')], max_length=5, verbose_name='Type of collection')),
                ('settype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='pd', max_length=5, verbose_name='Set type')),
                ('descrip', models.CharField(blank=True, max_length=255, null=True, verbose_name='Description')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Web info')),
                ('path', models.TextField(default='[]', verbose_name='History path')),
                ('scope', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='priv', max_length=5, verbose_name='Scope')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
                ('ssgauthornum', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of SSG authors')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionMan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=-1, verbose_name='Order')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_col', to='seeker.Collection')),
            ],
        ),
        migrations.CreateModel(
            name='Colwit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='SUPPLY A NAME', max_length=255, verbose_name='Title')),
                ('descr', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('stype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Status')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
                ('codico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='colwitcodicounits', to='seeker.Codico')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('otype', models.CharField(default='-', max_length=100, verbose_name='Object type')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idPaysEtab', models.IntegerField(default=-1, verbose_name='CNRS country id')),
                ('name', models.CharField(max_length=100, verbose_name='Name (EN)')),
                ('nameFR', models.CharField(max_length=100, verbose_name='Name (FR)')),
            ],
        ),
        migrations.CreateModel(
            name='Feast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name (English)')),
                ('latname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name (Latin)')),
                ('feastdate', models.TextField(blank=True, null=True, verbose_name='Feast date')),
            ],
        ),
        migrations.CreateModel(
            name='FieldChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=50)),
                ('english_name', models.CharField(max_length=100)),
                ('dutch_name', models.CharField(max_length=100)),
                ('abbr', models.CharField(default='-', max_length=20)),
                ('machine_value', models.IntegerField(help_text='The actual numeric value stored in the database. Created automatically.')),
            ],
            options={
                'ordering': ['field', 'machine_value'],
            },
        ),
        migrations.CreateModel(
            name='Free',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('field', models.CharField(max_length=255, verbose_name='Field')),
                ('main', models.CharField(max_length=255, verbose_name='Model')),
            ],
        ),
        migrations.CreateModel(
            name='HelpChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=200)),
                ('searchable', models.BooleanField(default=False)),
                ('display_name', models.CharField(max_length=50)),
                ('help_url', models.URLField(blank=True, default='', null=True, verbose_name='Link to more help')),
                ('help_html', models.TextField(blank=True, null=True, verbose_name='One-line help')),
            ],
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Key name')),
                ('kvalue', models.TextField(blank=True, default='', null=True, verbose_name='Key value')),
            ],
            options={
                'verbose_name_plural': 'Information Items',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('visibility', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='all', max_length=5, verbose_name='Visibility')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idLibrEtab', models.IntegerField(default=-1, verbose_name='CNRS library id')),
                ('name', models.CharField(max_length=255, verbose_name='Library')),
                ('libtype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], max_length=5, verbose_name='Library type')),
                ('stype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Status')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('mcount', models.IntegerField(default=0, verbose_name='Manuscripts for this library')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='city_libraries', to='seeker.City')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='country_libraries', to='seeker.Country')),
            ],
        ),
        migrations.CreateModel(
            name='Litref',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.CharField(max_length=255, verbose_name='Item ID')),
                ('year', models.IntegerField(blank=True, null=True, verbose_name='Publication year')),
                ('data', models.TextField(blank=True, default='', verbose_name='JSON data')),
                ('abbr', models.CharField(blank=True, default='', max_length=100, verbose_name='Abbreviation')),
                ('full', models.TextField(blank=True, default='', verbose_name='Full reference')),
                ('short', models.TextField(blank=True, default='', verbose_name='Short reference')),
            ],
        ),
        migrations.CreateModel(
            name='LitrefMan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pages', models.CharField(blank=True, max_length=200, null=True, verbose_name='Pages')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name (eng)')),
                ('stype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Status')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('lcity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lcity_locations', to='seeker.Location')),
                ('lcountry', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lcountry_locations', to='seeker.Location')),
            ],
        ),
        migrations.CreateModel(
            name='LocationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('level', models.IntegerField(default=0, verbose_name='Hierarchy level')),
            ],
        ),
        migrations.CreateModel(
            name='Manuscript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='SUPPLY A NAME', max_length=255, verbose_name='Name')),
                ('idno', models.CharField(blank=True, max_length=255, null=True, verbose_name='Identifier')),
                ('filename', models.CharField(blank=True, max_length=255, null=True, verbose_name='Filename')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Web info')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('editornotes', models.TextField(blank=True, null=True, verbose_name='Editor notes (Dutch)')),
                ('yearstart', models.IntegerField(default=100, verbose_name='Year from')),
                ('yearfinish', models.IntegerField(default=100, verbose_name='Year until')),
                ('support', models.TextField(blank=True, null=True, verbose_name='Support')),
                ('extent', models.TextField(blank=True, max_length=255, null=True, verbose_name='Extent')),
                ('format', models.CharField(blank=True, max_length=255, null=True, verbose_name='Format')),
                ('raw', models.TextField(blank=True, null=True, verbose_name='Raw')),
                ('stype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Status')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
                ('external', models.IntegerField(null=True, verbose_name='ID in external DB')),
                ('mtype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='man', max_length=5, verbose_name='Manifestation type')),
                ('itype', models.CharField(default='no', max_length=200, verbose_name='Import codico status')),
                ('literature', models.TextField(blank=True, null=True, verbose_name='Literature')),
                ('collections', models.ManyToManyField(related_name='collections_manuscript', through='seeker.CollectionMan', to='seeker.Collection')),
                ('comments', models.ManyToManyField(related_name='comments_manuscript', to='seeker.Comment')),
            ],
        ),
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
                ('until', models.DateTimeField(blank=True, null=True, verbose_name='Remove at')),
                ('msg', models.TextField(verbose_name='Message')),
                ('status', models.CharField(choices=[('0', '-'), ('1', 'N/A')], help_text='Sorry, no help available for view.status', max_length=5, verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='Origin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Original location')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Notes on this origin')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_origins', to='seeker.Location')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ptype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='unk', max_length=5, verbose_name='Profile status')),
                ('stack', models.TextField(default='[]', verbose_name='Stack')),
                ('search_manu', models.TextField(default='[]', verbose_name='Search results Manu')),
                ('search_sermo', models.TextField(default='[]', verbose_name='Search results Sermo')),
                ('search_gold', models.TextField(default='[]', verbose_name='Search results Gold')),
                ('search_super', models.TextField(default='[]', verbose_name='Search results Super')),
                ('affiliation', models.TextField(blank=True, null=True, verbose_name='Affiliation')),
                ('historysermo', models.TextField(default='[]', verbose_name='Sermon history')),
                ('historymanu', models.TextField(default='[]', verbose_name='Manuscript history')),
                ('historygold', models.TextField(default='[]', verbose_name='Sermon Gold history')),
                ('historysuper', models.TextField(default='[]', verbose_name='Super sermon Gold history')),
                ('basketsize', models.IntegerField(default=0, verbose_name='Basket size')),
                ('basketsize_manu', models.IntegerField(default=0, verbose_name='Basket size manuscripts')),
                ('basketsize_gold', models.IntegerField(default=0, verbose_name='Basket size sermons gold')),
                ('basketsize_super', models.IntegerField(default=0, verbose_name='Basket size super sermons gold')),
                ('basketitems', models.ManyToManyField(related_name='basketitems_user', through='seeker.Basket', to='seeker.Canwit')),
                ('basketitems_manu', models.ManyToManyField(related_name='basketitems_user_manu', through='seeker.BasketMan', to='seeker.Manuscript')),
                ('basketitems_super', models.ManyToManyField(related_name='basketitems_user_super', through='seeker.BasketSuper', to='seeker.Austat')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
            ],
        ),
        migrations.CreateModel(
            name='Provenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Provenance location')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_provenances', to='seeker.Location')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=50, verbose_name='Status of synchronization')),
                ('count', models.TextField(default='{}', verbose_name='Count details')),
                ('type', models.CharField(default='', max_length=255, verbose_name='Type')),
                ('user', models.CharField(default='', max_length=255, verbose_name='User')),
                ('msg', models.TextField(blank=True, null=True, verbose_name='Error message')),
            ],
        ),
        migrations.CreateModel(
            name='Stype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbr', models.CharField(max_length=50, verbose_name='Status abbreviation')),
                ('nameeng', models.CharField(max_length=50, verbose_name='Name (ENglish)')),
                ('namenld', models.CharField(max_length=50, verbose_name='Name (Dutch)')),
            ],
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('path', models.URLField(verbose_name='URL')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_visits', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('0', '-'), ('1', 'N/A')], max_length=5, verbose_name='Type of user keyword')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kw_userkeywords', to='seeker.Keyword')),
                ('manu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manu_userkeywords', to='seeker.Manuscript')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_userkeywords', to='seeker.Profile')),
                ('sermo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sermo_userkeywords', to='seeker.Canwit')),
                ('super', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='super_userkeywords', to='seeker.Austat')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('snote', models.TextField(default='[]', verbose_name='Status note(s)')),
                ('manu', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='manutemplates', to='seeker.Manuscript')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profiletemplates', to='seeker.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='SourceInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('code', models.TextField(blank=True, null=True, verbose_name='Code')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('collector', models.CharField(max_length=255, verbose_name='Collected by')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile_sourceinfos', to='seeker.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('reptype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], max_length=5, verbose_name='Report type')),
                ('contents', models.TextField(default='{}', verbose_name='Contents')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reconstruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0, verbose_name='Order')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
                ('codico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codicoreconstructions', to='seeker.Codico')),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscriptreconstructions', to='seeker.Manuscript')),
            ],
        ),
        migrations.CreateModel(
            name='Range',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.CharField(default='', max_length=9, verbose_name='Start')),
                ('einde', models.CharField(default='', max_length=9, verbose_name='Einde')),
                ('intro', models.CharField(blank=True, max_length=255, null=True, verbose_name='Introducer')),
                ('added', models.CharField(blank=True, max_length=255, null=True, verbose_name='Addition')),
                ('sermon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sermonranges', to='seeker.Canwit')),
            ],
        ),
        migrations.CreateModel(
            name='ProvenanceMan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Manuscript-specific provenance note')),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscripts_provenances', to='seeker.Manuscript')),
                ('provenance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscripts_provenances', to='seeker.Provenance')),
            ],
        ),
        migrations.CreateModel(
            name='ProvenanceCod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Codico-specific provenance note')),
                ('codico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codico_provenances', to='seeker.Codico')),
                ('provenance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codico_provenances', to='seeker.Provenance')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectEditor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rights', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='edi', max_length=5, verbose_name='Rights')),
                ('status', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='incl', max_length=5, verbose_name='Default assignment')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_editor', to='seeker.Profile')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_editor', to='seeker.Project')),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='projects',
            field=models.ManyToManyField(related_name='projects_profile', through='seeker.ProjectEditor', to='seeker.Project'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_profiles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='OriginCodico',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Codico-specific origin note')),
                ('codico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codico_origins', to='seeker.Codico')),
                ('origin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codico_origins', to='seeker.Origin')),
            ],
        ),
        migrations.CreateModel(
            name='MsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=-1, verbose_name='Order')),
                ('codico', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='codicoitems', to='seeker.Codico')),
                ('firstchild', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sermon_child', to='seeker.MsItem')),
                ('manu', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='manuitems', to='seeker.Manuscript')),
                ('next', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sermon_next', to='seeker.MsItem')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sermon_parent', to='seeker.MsItem')),
            ],
        ),
        migrations.CreateModel(
            name='ManuscriptProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_proj', to='seeker.Manuscript')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_proj', to='seeker.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ManuscriptKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_kw', to='seeker.Keyword')),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_kw', to='seeker.Manuscript')),
            ],
        ),
        migrations.CreateModel(
            name='ManuscriptExt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=255, verbose_name='External URL')),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscriptexternals', to='seeker.Manuscript')),
            ],
        ),
        migrations.CreateModel(
            name='ManuscriptCorpusLock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('status', models.TextField(default='empty', verbose_name='Status')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profilecorpuslocks', to='seeker.Profile')),
                ('super', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supercorpuslocks', to='seeker.Austat')),
            ],
        ),
        migrations.CreateModel(
            name='ManuscriptCorpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('manu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manucorpora', to='seeker.Manuscript')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profilecorpora', to='seeker.Profile')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sourcecorpora', to='seeker.Austat')),
                ('super', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supercorpora', to='seeker.Austat')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targetcorpora', to='seeker.Austat')),
            ],
        ),
        migrations.AddField(
            model_name='manuscript',
            name='keywords',
            field=models.ManyToManyField(related_name='keywords_manu', through='seeker.ManuscriptKeyword', to='seeker.Keyword'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='lcity',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lcity_manuscripts', to='seeker.Location'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='lcountry',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lcountry_manuscripts', to='seeker.Location'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='library',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='library_manuscripts', to='seeker.Library'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='litrefs',
            field=models.ManyToManyField(through='seeker.LitrefMan', to='seeker.Litref'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='origin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='origin_manuscripts', to='seeker.Origin'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='projects',
            field=models.ManyToManyField(related_name='project_manuscripts', through='seeker.ManuscriptProject', to='seeker.Project'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='provenances',
            field=models.ManyToManyField(through='seeker.ProvenanceMan', to='seeker.Provenance'),
        ),
        migrations.AddField(
            model_name='manuscript',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sourcemanuscripts', to='seeker.SourceInfo'),
        ),
        migrations.CreateModel(
            name='LocationRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contained', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contained_locrelations', to='seeker.Location')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='container_locrelations', to='seeker.Location')),
            ],
        ),
        migrations.CreateModel(
            name='LocationName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('language', models.CharField(default='eng', max_length=100, verbose_name='Language')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_names', to='seeker.Location')),
            ],
        ),
        migrations.CreateModel(
            name='LocationIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idname', models.CharField(blank=True, max_length=100, null=True, verbose_name='Identifier name')),
                ('idvalue', models.IntegerField(blank=True, null=True, verbose_name='Identifier value')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_identifiers', to='seeker.Location')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='loctype',
            field=models.ForeignKey(default=lila.seeker.models.get_default_loctype, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='loctypelocations', to='seeker.LocationType'),
        ),
        migrations.AddField(
            model_name='location',
            name='relations',
            field=models.ManyToManyField(related_name='relations_location', through='seeker.LocationRelation', to='seeker.Location'),
        ),
        migrations.AddField(
            model_name='litrefman',
            name='manuscript',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_litrefs', to='seeker.Manuscript'),
        ),
        migrations.AddField(
            model_name='litrefman',
            name='reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_litrefs', to='seeker.Litref'),
        ),
        migrations.CreateModel(
            name='LitrefCol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pages', models.CharField(blank=True, max_length=200, null=True, verbose_name='Pages')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_litrefcols', to='seeker.Collection')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_litrefcols', to='seeker.Litref')),
            ],
        ),
        migrations.AddField(
            model_name='library',
            name='lcity',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lcity_libraries', to='seeker.Location'),
        ),
        migrations.AddField(
            model_name='library',
            name='lcountry',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lcountry_libraries', to='seeker.Location'),
        ),
        migrations.AddField(
            model_name='library',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_libraries', to='seeker.Location'),
        ),
        migrations.CreateModel(
            name='Daterange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('yearstart', models.IntegerField(default=100, verbose_name='Year from')),
                ('yearfinish', models.IntegerField(default=100, verbose_name='Year until')),
                ('pages', models.CharField(blank=True, max_length=200, null=True, verbose_name='Pages')),
                ('codico', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='codico_dateranges', to='seeker.Codico')),
                ('reference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reference_dateranges', to='seeker.Litref')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profilecomments', to='seeker.Profile'),
        ),
        migrations.CreateModel(
            name='ColwitKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('colwit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='colwit_kw', to='seeker.Colwit')),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='colwit_kw', to='seeker.Keyword')),
            ],
        ),
        migrations.AddField(
            model_name='colwit',
            name='keywords',
            field=models.ManyToManyField(related_name='keywords_colwit', through='seeker.ColwitKeyword', to='seeker.Keyword'),
        ),
        migrations.CreateModel(
            name='CollOverlap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overlap', models.IntegerField(default=0, verbose_name='Overlap percentage')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('saved', models.DateTimeField(blank=True, null=True)),
                ('collection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='collection_colloverlaps', to='seeker.Collection')),
                ('manuscript', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='manu_colloverlaps', to='seeker.Manuscript')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_colloverlaps', to='seeker.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionSuper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=-1, verbose_name='Order')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='super_col', to='seeker.Collection')),
                ('super', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='super_col', to='seeker.Austat')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionSerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=-1, verbose_name='Order')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_col', to='seeker.Collection')),
                ('sermon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_col', to='seeker.Canwit')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_proj', to='seeker.Collection')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_proj', to='seeker.Project')),
            ],
        ),
        migrations.AddField(
            model_name='collectionman',
            name='manuscript',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_col', to='seeker.Manuscript'),
        ),
        migrations.AddField(
            model_name='collection',
            name='litrefs',
            field=models.ManyToManyField(related_name='litrefs_collection', through='seeker.LitrefCol', to='seeker.Litref'),
        ),
        migrations.AddField(
            model_name='collection',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner_collections', to='seeker.Profile'),
        ),
        migrations.AddField(
            model_name='collection',
            name='projects',
            field=models.ManyToManyField(related_name='project_collection', through='seeker.CollectionProject', to='seeker.Project'),
        ),
        migrations.CreateModel(
            name='CodicoKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('codico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codico_kw', to='seeker.Codico')),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codico_kw', to='seeker.Keyword')),
            ],
        ),
        migrations.AddField(
            model_name='codico',
            name='comments',
            field=models.ManyToManyField(related_name='comments_codi', to='seeker.Comment'),
        ),
        migrations.AddField(
            model_name='codico',
            name='keywords',
            field=models.ManyToManyField(related_name='keywords_codi', through='seeker.CodicoKeyword', to='seeker.Keyword'),
        ),
        migrations.AddField(
            model_name='codico',
            name='manuscript',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscriptcodicounits', to='seeker.Manuscript'),
        ),
        migrations.AddField(
            model_name='codico',
            name='origins',
            field=models.ManyToManyField(through='seeker.OriginCodico', to='seeker.Origin'),
        ),
        migrations.AddField(
            model_name='codico',
            name='provenances',
            field=models.ManyToManyField(through='seeker.ProvenanceCod', to='seeker.Provenance'),
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='country_cities', to='seeker.Country'),
        ),
        migrations.CreateModel(
            name='CanwitSignature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255, verbose_name='Code')),
                ('editype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='gr', max_length=5, verbose_name='Edition type')),
                ('sermon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwitsignatures', to='seeker.Canwit')),
            ],
        ),
        migrations.CreateModel(
            name='CanwitProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_proj', to='seeker.Project')),
                ('sermon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_proj', to='seeker.Canwit')),
            ],
        ),
        migrations.CreateModel(
            name='CanwitKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_kw', to='seeker.Keyword')),
                ('sermon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_kw', to='seeker.Canwit')),
            ],
        ),
        migrations.CreateModel(
            name='CanwitAustat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('linktype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='uns', max_length=5, verbose_name='Link type')),
                ('manu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='canwit_austat', to='seeker.Manuscript')),
                ('sermon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_austat', to='seeker.Canwit')),
                ('super', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canwit_austat', to='seeker.Austat')),
            ],
        ),
        migrations.AddField(
            model_name='canwit',
            name='austats',
            field=models.ManyToManyField(related_name='austat_sermons', through='seeker.CanwitAustat', to='seeker.Austat'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_sermons', to='seeker.Author'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='collections',
            field=models.ManyToManyField(related_name='collections_sermon', through='seeker.CollectionSerm', to='seeker.Collection'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='comments',
            field=models.ManyToManyField(related_name='comments_sermon', to='seeker.Comment'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='distances',
            field=models.ManyToManyField(related_name='distances_sermons', through='seeker.AustatDist', to='seeker.Austat'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='feast',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feastsermons', to='seeker.Feast'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='firstchild',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sermon_child', to='seeker.Canwit'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='keywords',
            field=models.ManyToManyField(related_name='keywords_sermon', through='seeker.CanwitKeyword', to='seeker.Keyword'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='msitem',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='itemsermons', to='seeker.MsItem'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='next',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sermon_next', to='seeker.Canwit'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sermon_parent', to='seeker.Canwit'),
        ),
        migrations.AddField(
            model_name='canwit',
            name='projects',
            field=models.ManyToManyField(related_name='project_sermons', through='seeker.CanwitProject', to='seeker.Project'),
        ),
        migrations.CreateModel(
            name='Canhead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locus', models.CharField(blank=True, max_length=255, null=True, verbose_name='Locus')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title')),
                ('msitem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='itemheads', to='seeker.MsItem')),
            ],
        ),
        migrations.CreateModel(
            name='BibVerse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bkchvs', models.CharField(max_length=9, verbose_name='Bk/Ch/Vs')),
                ('bibrange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bibrangeverses', to='seeker.BibRange')),
            ],
        ),
        migrations.AddField(
            model_name='bibrange',
            name='sermon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sermonbibranges', to='seeker.Canwit'),
        ),
        migrations.AddField(
            model_name='basketsuper',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_contents_super', to='seeker.Profile'),
        ),
        migrations.AddField(
            model_name='basketsuper',
            name='super',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_contents_super', to='seeker.Austat'),
        ),
        migrations.AddField(
            model_name='basketman',
            name='manu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_contents_manu', to='seeker.Manuscript'),
        ),
        migrations.AddField(
            model_name='basketman',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_contents_manu', to='seeker.Profile'),
        ),
        migrations.AddField(
            model_name='basket',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_contents', to='seeker.Profile'),
        ),
        migrations.AddField(
            model_name='basket',
            name='sermon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_contents', to='seeker.Canwit'),
        ),
        migrations.CreateModel(
            name='AustatProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('equal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equal_proj', to='seeker.Austat')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equal_proj', to='seeker.Project')),
            ],
        ),
        migrations.CreateModel(
            name='AustatLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('linktype', models.CharField(choices=[('0', '-'), ('1', 'N/A')], default='eqs', max_length=5, verbose_name='Link type')),
                ('spectype', models.CharField(blank=True, choices=[('0', '-'), ('1', 'N/A')], max_length=5, null=True, verbose_name='Specification')),
                ('alternatives', models.CharField(blank=True, choices=[('0', '-'), ('1', 'N/A')], max_length=5, null=True, verbose_name='Alternatives')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Notes on this link')),
                ('dst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='austat_dst', to='seeker.Austat')),
                ('src', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='austat_src', to='seeker.Austat')),
            ],
        ),
        migrations.CreateModel(
            name='AustatKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('equal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equal_kw', to='seeker.Austat')),
                ('keyword', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equal_kw', to='seeker.Keyword')),
            ],
        ),
        migrations.AddField(
            model_name='austatdist',
            name='sermon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sermonsuperdist', to='seeker.Canwit'),
        ),
        migrations.AddField(
            model_name='austatdist',
            name='super',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sermonsuperdist', to='seeker.Austat'),
        ),
        migrations.CreateModel(
            name='AustatCorpusItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('words', models.TextField(default='{}', verbose_name='Words')),
                ('scount', models.IntegerField(default=0, verbose_name='Sermon count')),
                ('authorname', models.TextField(default='empty', verbose_name="Author's name")),
                ('corpus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='corpusitems', to='seeker.AustatCorpus')),
                ('equal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ssgcorpusequals', to='seeker.Austat')),
            ],
        ),
        migrations.AddField(
            model_name='austatcorpus',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profileequalcorpora', to='seeker.Profile'),
        ),
        migrations.AddField(
            model_name='austatcorpus',
            name='ssg',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ssgequalcorpora', to='seeker.Austat'),
        ),
        migrations.AddField(
            model_name='austat',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_austats', to='seeker.Author'),
        ),
        migrations.AddField(
            model_name='austat',
            name='collections',
            field=models.ManyToManyField(related_name='collections_super', through='seeker.CollectionSuper', to='seeker.Collection'),
        ),
        migrations.AddField(
            model_name='austat',
            name='comments',
            field=models.ManyToManyField(related_name='comments_super', to='seeker.Comment'),
        ),
        migrations.AddField(
            model_name='austat',
            name='keywords',
            field=models.ManyToManyField(related_name='keywords_super', through='seeker.AustatKeyword', to='seeker.Keyword'),
        ),
        migrations.AddField(
            model_name='austat',
            name='moved',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moved_ssg', to='seeker.Austat'),
        ),
        migrations.AddField(
            model_name='austat',
            name='projects',
            field=models.ManyToManyField(related_name='project_austat', through='seeker.AustatProject', to='seeker.Project'),
        ),
        migrations.AddField(
            model_name='austat',
            name='relations',
            field=models.ManyToManyField(related_name='related_to', through='seeker.AustatLink', to='seeker.Austat'),
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemtype', models.CharField(max_length=200, verbose_name='Item type')),
                ('itemid', models.IntegerField(default=0, verbose_name='Item id')),
                ('linktype', models.CharField(blank=True, max_length=200, null=True, verbose_name='Link type')),
                ('linkid', models.IntegerField(blank=True, null=True, verbose_name='Link id')),
                ('actiontype', models.CharField(max_length=200, verbose_name='Action type')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Detail')),
                ('when', models.DateTimeField(default=lila.seeker.models.get_current_datetime)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_actions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
